name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./package
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Lint files
        run: npm run lint

      - name: Typecheck files
        run: npm run typecheck

  # TODO:JB - Setup testing
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup
  #       uses: ./.github/actions/setup

  #     - name: Install appium
  #       run: npm install -g appium && appium -v

  #     - name: Install driver
  #       run: appium driver install uiautomator2 && appium driver list --installed

  #     - name: Run Appium
  #       run: appium &

  #     - name: Run tests
  #       run: npm run test

  # build-library:
  #   runs-on: ubuntu-latest
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  #     NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  #   outputs:
  #     version: ${{ steps.version.outputs.version }}
  #     version-major: ${{ steps.version.outputs.version-major-only }}
  #     version-minor: ${{ format('{0}.{1}', steps.version.outputs.version-major-only, steps.version.outputs.version-minor-only) }}
  #     version-patch: ${{ format('{0}.{1}.{2}', steps.version.outputs.version-major-only, steps.version.outputs.version-minor-only, steps.version.outputs.version-patch-only) }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Generate next version
  #       id: version
  #       uses: conventional-actions/next-version@v1

  #     - name: Setup npmrc for ketch-sdk
  #       uses: conventional-actions/setup-npmrc@v1
  #       with:
  #         always-auth: true
  #         registry-url: https://registry.npmjs.com/
  #         scope: ketch-sdk
  #         token: ${{ secrets.NPM_TOKEN }}

  #     - name: Setup npmrc for ketch-com
  #       uses: conventional-actions/setup-npmrc@v1
  #       with:
  #         always-auth: true
  #         scope: ketch-com
  #         token: ${{ secrets.GH_TOKEN }}

  #     - name: Setup Node version
  #       uses: conventional-actions/write-version@v1
  #       with:
  #         output_path: package.json
  #         version: ${{ format('{0}.{1}.{2}', steps.version.outputs.version-major-only, steps.version.outputs.version-minor-only, steps.version.outputs.version-patch-only) }}

  #     - name: Setup Node version
  #       uses: conventional-actions/write-version@v1
  #       with:
  #         output_path: package.json
  #         version: ${{ format('{0}.{1}.{2}', steps.version.outputs.version-major-only, steps.version.outputs.version-minor-only, steps.version.outputs.version-patch-only) }}

  #     - name: Install dependencies
  #       run: npm install
  #       shell: bash

  #     - name: Build package
  #       run: npm run prepare

  #     - name: Publish
  #       if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
  #       run: npm publish --access public

  # release:
  #   name: Release
  #   if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
  #   needs:
  #     - build-library
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #   steps:
  #     - name: Create Release
  #       uses: conventional-actions/create-release@v1
  #       with:
  #         tag_name: ${{ needs.build.outputs.version }}
  #         artifacts: '*'

  # - name: 'cat package.json'
  #   run: cat ./package.json

  # - name: 'Automated Version Bump'
  #   id: version-bump
  #   uses: 'phips28/gh-action-bump-version@master'
  #   with:
  #     tag-prefix: 'v'
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  # - name: 'cat package.json'
  #   run: cat ./package.json

  # - name: 'Output Step'
  #   env:
  #     NEW_TAG: ${{ steps.version.outputs.version }}
  #   run: echo "new tag $NEW_TAG"

  # Comment to test version bumping!
  # - name: Generate next version
  #   id: version
  #   uses: conventional-actions/next-version@v1

  # - name: Update package version
  #   uses: conventional-actions/write-version@v1
  #   with:
  #     output_path: package.json
  #     version: ${{ format('{0}.{1}.{2}', steps.version.outputs.version-major-only, steps.version.outputs.version-minor-only, steps.version.outputs.version-patch-only) }}

  # - name: Create Tag
  #   run: git tag ${{ format('{0}.{1}.{2}', steps.version.outputs.version-major-only, steps.version.outputs.version-minor-only, steps.version.outputs.version-patch-only) }} && git push origin ${{ format('{0}.{1}.{2}', steps.version.outputs.version-major-only, steps.version.outputs.version-minor-only, steps.version.outputs.version-patch-only) }}

  # - name: 'cat package.json'
  #   run: cat ./package.json

  # - name: Setup
  #   uses: ./.github/actions/setup

  # - name: Build package
  #   run: npm run prepare

  # - name: Setup npmrc for ketch-com
  #   uses: conventional-actions/setup-npmrc@v1
  #   with:
  #     always-auth: true
  #     scope: ketch-com
  #     token: ${{ secrets.GH_TOKEN }}

  # - name: Publish
  #   if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
  #   run: npm publish --access public

  # - name: Create Release
  #   if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
  #   uses: conventional-actions/create-release@v1
  #   with:
  #     tag_name: ${{ format('{0}.{1}.{2}', steps.version.outputs.version-major-only, steps.version.outputs.version-minor-only, steps.version.outputs.version-patch-only) }}
  #     artifacts: '*'

  # TODO:JB - Re-enable when outputing builds to device farm
  # build-example:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup
  #       uses: ./.github/actions/setup

  #     - name: Build APK
  #       run: npm run example build:apk
